{"ast":null,"code":"/*\nLanguage: R\nDescription: R is a free software environment for statistical computing and graphics.\nAuthor: Joe Cheng <joe@rstudio.org>\nContributors: Konrad Rudolph <konrad.rudolph@gmail.com>\nWebsite: https://www.r-project.org\nCategory: scientific\n*/\nfunction r(hljs) {\n  // Identifiers in R cannot start with `_`, but they can start with `.` if it\n  // is not immediately followed by a digit.\n  // R also supports quoted identifiers, which are near-arbitrary sequences\n  // delimited by backticks (`…`), which may contain escape sequences. These are\n  // handled in a separate mode. See `test/markup/r/names.txt` for examples.\n  // FIXME: Support Unicode identifiers.\n  const IDENT_RE = /(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/;\n  return {\n    name: 'R',\n    keywords: {\n      $pattern: IDENT_RE,\n      keyword: 'function if in break next repeat else for while',\n      literal: 'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 ' + 'NA_character_|10 NA_complex_|10',\n      built_in: // Builtin constants\n      'LETTERS letters month.abb month.name pi T F ' + // Primitive functions\n      // These are all the functions in `base` that are implemented as a\n      // `.Primitive`, minus those functions that are also keywords.\n      'abs acos acosh all any anyNA Arg as.call as.character' + 'as.complex as.double as.environment as.integer as.logical' + 'as.null.default as.numeric as.raw asin asinh atan atanh attr' + 'attributes baseenv browser c call ceiling class Conj cos cosh' + 'cospi cummax cummin cumprod cumsum digamma dim dimnames' + 'emptyenv exp expression floor forceAndCall gamma gc.time' + 'globalenv Im interactive invisible is.array is.atomic is.call' + 'is.character is.complex is.double is.environment is.expression' + 'is.finite is.function is.infinite is.integer is.language' + 'is.list is.logical is.matrix is.na is.name is.nan is.null' + 'is.numeric is.object is.pairlist is.raw is.recursive is.single' + 'is.symbol lazyLoadDBfetch length lgamma list log max min' + 'missing Mod names nargs nzchar oldClass on.exit pos.to.env' + 'proc.time prod quote range Re rep retracemem return round' + 'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt' + 'standardGeneric substitute sum switch tan tanh tanpi tracemem' + 'trigamma trunc unclass untracemem UseMethod xtfrm'\n    },\n    contains: [// Roxygen comments\n    hljs.COMMENT(/#'/, /$/, {\n      contains: [{\n        // Handle `@examples` separately to cause all subsequent code\n        // until the next `@`-tag on its own line to be kept as-is,\n        // preventing highlighting. This code is example R code, so nested\n        // doctags shouldn’t be treated as such. See\n        // `test/markup/r/roxygen.txt` for an example.\n        className: 'doctag',\n        begin: '@examples',\n        starts: {\n          contains: [{\n            begin: /\\n/\n          }, {\n            begin: /#'\\s*(?=@[a-zA-Z]+)/,\n            endsParent: true\n          }, {\n            begin: /#'/,\n            end: /$/,\n            excludeBegin: true\n          }]\n        }\n      }, {\n        // Handle `@param` to highlight the parameter name following\n        // after.\n        className: 'doctag',\n        begin: '@param',\n        end: /$/,\n        contains: [{\n          className: 'variable',\n          variants: [{\n            begin: IDENT_RE\n          }, {\n            begin: /`(?:\\\\.|[^`])+`/\n          }],\n          endsParent: true\n        }]\n      }, {\n        className: 'doctag',\n        begin: /@[a-zA-Z]+/\n      }, {\n        className: 'meta-keyword',\n        begin: /\\\\[a-zA-Z]+/\n      }]\n    }), hljs.HASH_COMMENT_MODE, {\n      className: 'string',\n      contains: [hljs.BACKSLASH_ESCAPE],\n      variants: [hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]\"(-*)\\(/,\n        end: /\\)(-*)\"/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]\"(-*)\\{/,\n        end: /\\}(-*)\"/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]\"(-*)\\[/,\n        end: /\\](-*)\"/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]'(-*)\\(/,\n        end: /\\)(-*)'/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]'(-*)\\{/,\n        end: /\\}(-*)'/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]'(-*)\\[/,\n        end: /\\](-*)'/\n      }), {\n        begin: '\"',\n        end: '\"',\n        relevance: 0\n      }, {\n        begin: \"'\",\n        end: \"'\",\n        relevance: 0\n      }]\n    }, {\n      className: 'number',\n      variants: [// TODO: replace with negative look-behind when available\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/ },\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ },\n      // { begin: /(?<![a-zA-Z0-9._])(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/ }\n      // The below rules all eat an extra character in front (for the\n      // look-behind check) and then exclude it from the match, but I think\n      // in many cases this will work out just fine.\n      {\n        // Special case: only hexadecimal binary powers can contain fractions.\n        begin: /([^a-zA-Z0-9._])(?=0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?)/,\n        end: /0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/,\n        excludeBegin: true\n      }, {\n        begin: /([^a-zA-Z0-9._])(?=0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?)/,\n        end: /0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/,\n        excludeBegin: true\n      }, {\n        begin: /([^a-zA-Z0-9._])(?=(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?)/,\n        end: /(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/,\n        excludeBegin: true\n      }],\n      // \"on:begin\": (match, response) => {\n      //   if (match.index > 0) {\n      //     let priorChar = match.input[match.index - 1];\n      //     if (priorChar.match(/[a-zA-Z0-9._]/)) response.ignoreMatch();\n      //   }\n      // },\n      relevance: 0\n    }, {\n      // infix operator\n      begin: '%',\n      end: '%'\n    }, {\n      // escaped identifier\n      begin: '`',\n      end: '`',\n      contains: [{\n        begin: /\\\\./\n      }]\n    }]\n  };\n}\n\nmodule.exports = r;","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/highlight.js/lib/languages/r.js"],"names":["r","hljs","IDENT_RE","name","keywords","$pattern","keyword","literal","built_in","contains","COMMENT","className","begin","starts","endsParent","end","excludeBegin","variants","HASH_COMMENT_MODE","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","relevance","module","exports"],"mappings":"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","sourcesContent":["/*\nLanguage: R\nDescription: R is a free software environment for statistical computing and graphics.\nAuthor: Joe Cheng <joe@rstudio.org>\nContributors: Konrad Rudolph <konrad.rudolph@gmail.com>\nWebsite: https://www.r-project.org\nCategory: scientific\n*/\n\nfunction r(hljs) {\n  // Identifiers in R cannot start with `_`, but they can start with `.` if it\n  // is not immediately followed by a digit.\n  // R also supports quoted identifiers, which are near-arbitrary sequences\n  // delimited by backticks (`…`), which may contain escape sequences. These are\n  // handled in a separate mode. See `test/markup/r/names.txt` for examples.\n  // FIXME: Support Unicode identifiers.\n  const IDENT_RE = /(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/;\n\n  return {\n    name: 'R',\n\n    keywords: {\n      $pattern: IDENT_RE,\n      keyword:\n        'function if in break next repeat else for while',\n      literal:\n        'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 ' +\n        'NA_character_|10 NA_complex_|10',\n      built_in:\n        // Builtin constants\n        'LETTERS letters month.abb month.name pi T F ' +\n        // Primitive functions\n        // These are all the functions in `base` that are implemented as a\n        // `.Primitive`, minus those functions that are also keywords.\n        'abs acos acosh all any anyNA Arg as.call as.character' +\n        'as.complex as.double as.environment as.integer as.logical' +\n        'as.null.default as.numeric as.raw asin asinh atan atanh attr' +\n        'attributes baseenv browser c call ceiling class Conj cos cosh' +\n        'cospi cummax cummin cumprod cumsum digamma dim dimnames' +\n        'emptyenv exp expression floor forceAndCall gamma gc.time' +\n        'globalenv Im interactive invisible is.array is.atomic is.call' +\n        'is.character is.complex is.double is.environment is.expression' +\n        'is.finite is.function is.infinite is.integer is.language' +\n        'is.list is.logical is.matrix is.na is.name is.nan is.null' +\n        'is.numeric is.object is.pairlist is.raw is.recursive is.single' +\n        'is.symbol lazyLoadDBfetch length lgamma list log max min' +\n        'missing Mod names nargs nzchar oldClass on.exit pos.to.env' +\n        'proc.time prod quote range Re rep retracemem return round' +\n        'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt' +\n        'standardGeneric substitute sum switch tan tanh tanpi tracemem' +\n        'trigamma trunc unclass untracemem UseMethod xtfrm',\n    },\n\n    contains: [\n      // Roxygen comments\n      hljs.COMMENT(\n        /#'/,\n        /$/,\n        {\n          contains: [\n            {\n              // Handle `@examples` separately to cause all subsequent code\n              // until the next `@`-tag on its own line to be kept as-is,\n              // preventing highlighting. This code is example R code, so nested\n              // doctags shouldn’t be treated as such. See\n              // `test/markup/r/roxygen.txt` for an example.\n              className: 'doctag',\n              begin: '@examples',\n              starts: {\n                contains: [\n                  { begin: /\\n/ },\n                  {\n                    begin: /#'\\s*(?=@[a-zA-Z]+)/,\n                    endsParent: true,\n                  },\n                  {\n                    begin: /#'/,\n                    end: /$/,\n                    excludeBegin: true,\n                  }\n                ]\n              }\n            },\n            {\n              // Handle `@param` to highlight the parameter name following\n              // after.\n              className: 'doctag',\n              begin: '@param',\n              end: /$/,\n              contains: [\n                {\n                  className: 'variable',\n                  variants: [\n                    { begin: IDENT_RE },\n                    { begin: /`(?:\\\\.|[^`])+`/ }\n                  ],\n                  endsParent: true\n                }\n              ]\n            },\n            {\n              className: 'doctag',\n              begin: /@[a-zA-Z]+/\n            },\n            {\n              className: 'meta-keyword',\n              begin: /\\\\[a-zA-Z]+/,\n            }\n          ]\n        }\n      ),\n\n      hljs.HASH_COMMENT_MODE,\n\n      {\n        className: 'string',\n        contains: [hljs.BACKSLASH_ESCAPE],\n        variants: [\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\(/, end: /\\)(-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\{/, end: /\\}(-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\[/, end: /\\](-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\(/, end: /\\)(-*)'/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\{/, end: /\\}(-*)'/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\[/, end: /\\](-*)'/ }),\n          {begin: '\"', end: '\"', relevance: 0},\n          {begin: \"'\", end: \"'\", relevance: 0}\n        ],\n      },\n      {\n        className: 'number',\n        variants: [\n          // TODO: replace with negative look-behind when available\n          // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/ },\n          // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ },\n          // { begin: /(?<![a-zA-Z0-9._])(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/ }\n\n          // The below rules all eat an extra character in front (for the\n          // look-behind check) and then exclude it from the match, but I think\n          // in many cases this will work out just fine.\n          {\n            // Special case: only hexadecimal binary powers can contain fractions.\n            begin: /([^a-zA-Z0-9._])(?=0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?)/,\n            end: /0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/,\n            excludeBegin: true\n          },\n          {\n            begin: /([^a-zA-Z0-9._])(?=0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?)/,\n            end: /0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ ,\n            excludeBegin: true\n          },\n          {\n            begin: /([^a-zA-Z0-9._])(?=(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?)/,\n            end: /(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/,\n            excludeBegin: true\n          }\n        ],\n        // \"on:begin\": (match, response) => {\n        //   if (match.index > 0) {\n        //     let priorChar = match.input[match.index - 1];\n        //     if (priorChar.match(/[a-zA-Z0-9._]/)) response.ignoreMatch();\n        //   }\n        // },\n        relevance: 0\n      },\n\n      {\n        // infix operator\n        begin: '%',\n        end: '%'\n      },\n\n      {\n        // escaped identifier\n        begin: '`',\n        end: '`',\n        contains: [\n          { begin: /\\\\./ }\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = r;\n"]},"metadata":{},"sourceType":"script"}