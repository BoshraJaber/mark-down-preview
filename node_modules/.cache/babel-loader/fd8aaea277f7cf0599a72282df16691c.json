{"ast":null,"code":"exports.tokenize = tokenizeBlockQuoteStart;\nexports.continuation = {\n  tokenize: tokenizeBlockQuoteContinuation\n};\nexports.exit = exit;\n\nvar markdownSpace = require('../character/markdown-space');\n\nvar createSpace = require('./factory-space');\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  var self = this;\n  return start;\n\n  function start(code) {\n    if (code === 62) {\n      if (!self.containerState.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        });\n        self.containerState.open = true;\n      }\n\n      effects.enter('blockQuotePrefix');\n      effects.enter('blockQuoteMarker');\n      effects.consume(code);\n      effects.exit('blockQuoteMarker');\n      return after;\n    }\n\n    return nok(code);\n  }\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace');\n      effects.consume(code);\n      effects.exit('blockQuotePrefixWhitespace');\n      effects.exit('blockQuotePrefix');\n      return ok;\n    }\n\n    effects.exit('blockQuotePrefix');\n    return ok(code);\n  }\n}\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return createSpace(effects, effects.attempt(exports, ok, nok), 'linePrefix', 4);\n}\n\nfunction exit(effects) {\n  effects.exit('blockQuote');\n}","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/micromark/dist/tokenize/block-quote.js"],"names":["exports","tokenize","tokenizeBlockQuoteStart","continuation","tokenizeBlockQuoteContinuation","exit","markdownSpace","require","createSpace","effects","ok","nok","self","start","code","containerState","open","enter","_container","consume","after","attempt"],"mappings":"AAAAA,OAAO,CAACC,QAAR,GAAmBC,uBAAnB;AACAF,OAAO,CAACG,YAAR,GAAuB;AAACF,EAAAA,QAAQ,EAAEG;AAAX,CAAvB;AACAJ,OAAO,CAACK,IAAR,GAAeA,IAAf;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAAD,CAA3B;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AAEA,SAASL,uBAAT,CAAiCO,OAAjC,EAA0CC,EAA1C,EAA8CC,GAA9C,EAAmD;AACjD,MAAIC,IAAI,GAAG,IAAX;AAEA,SAAOC,KAAP;;AAEA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB,QAAIA,IAAI,KAAK,EAAb,EAAiB;AACf,UAAI,CAACF,IAAI,CAACG,cAAL,CAAoBC,IAAzB,EAA+B;AAC7BP,QAAAA,OAAO,CAACQ,KAAR,CAAc,YAAd,EAA4B;AAACC,UAAAA,UAAU,EAAE;AAAb,SAA5B;AACAN,QAAAA,IAAI,CAACG,cAAL,CAAoBC,IAApB,GAA2B,IAA3B;AACD;;AAEDP,MAAAA,OAAO,CAACQ,KAAR,CAAc,kBAAd;AACAR,MAAAA,OAAO,CAACQ,KAAR,CAAc,kBAAd;AACAR,MAAAA,OAAO,CAACU,OAAR,CAAgBL,IAAhB;AACAL,MAAAA,OAAO,CAACJ,IAAR,CAAa,kBAAb;AACA,aAAOe,KAAP;AACD;;AAED,WAAOT,GAAG,CAACG,IAAD,CAAV;AACD;;AAED,WAASM,KAAT,CAAeN,IAAf,EAAqB;AACnB,QAAIR,aAAa,CAACQ,IAAD,CAAjB,EAAyB;AACvBL,MAAAA,OAAO,CAACQ,KAAR,CAAc,4BAAd;AACAR,MAAAA,OAAO,CAACU,OAAR,CAAgBL,IAAhB;AACAL,MAAAA,OAAO,CAACJ,IAAR,CAAa,4BAAb;AACAI,MAAAA,OAAO,CAACJ,IAAR,CAAa,kBAAb;AACA,aAAOK,EAAP;AACD;;AAEDD,IAAAA,OAAO,CAACJ,IAAR,CAAa,kBAAb;AACA,WAAOK,EAAE,CAACI,IAAD,CAAT;AACD;AACF;;AAED,SAASV,8BAAT,CAAwCK,OAAxC,EAAiDC,EAAjD,EAAqDC,GAArD,EAA0D;AACxD,SAAOH,WAAW,CAChBC,OADgB,EAEhBA,OAAO,CAACY,OAAR,CAAgBrB,OAAhB,EAAyBU,EAAzB,EAA6BC,GAA7B,CAFgB,EAGhB,YAHgB,EAIhB,CAJgB,CAAlB;AAMD;;AAED,SAASN,IAAT,CAAcI,OAAd,EAAuB;AACrBA,EAAAA,OAAO,CAACJ,IAAR,CAAa,YAAb;AACD","sourcesContent":["exports.tokenize = tokenizeBlockQuoteStart\nexports.continuation = {tokenize: tokenizeBlockQuoteContinuation}\nexports.exit = exit\n\nvar markdownSpace = require('../character/markdown-space')\n\nvar createSpace = require('./factory-space')\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  var self = this\n\n  return start\n\n  function start(code) {\n    if (code === 62) {\n      if (!self.containerState.open) {\n        effects.enter('blockQuote', {_container: true})\n        self.containerState.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return createSpace(\n    effects,\n    effects.attempt(exports, ok, nok),\n    'linePrefix',\n    4\n  )\n}\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n"]},"metadata":{},"sourceType":"script"}