{"ast":null,"code":"exports.tokenize = tokenizeThematicBreak;\n\nvar markdownLineEnding = require('../character/markdown-line-ending');\n\nvar markdownSpace = require('../character/markdown-space');\n\nvar createSpace = require('./factory-space');\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  var size = 0;\n  var marker;\n  return start;\n\n  function start(code) {\n    effects.enter('thematicBreak');\n    marker = code;\n    return atBreak(code);\n  }\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence');\n      return sequence(code);\n    }\n\n    if (markdownSpace(code)) {\n      return createSpace(effects, atBreak, 'whitespace')(code);\n    }\n\n    if (size < 3 || code !== null && !markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    effects.exit('thematicBreak');\n    return ok(code);\n  }\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n\n    effects.exit('thematicBreakSequence');\n    return atBreak(code);\n  }\n}","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/micromark/dist/tokenize/thematic-break.js"],"names":["exports","tokenize","tokenizeThematicBreak","markdownLineEnding","require","markdownSpace","createSpace","effects","ok","nok","size","marker","start","code","enter","atBreak","sequence","exit","consume"],"mappings":"AAAAA,OAAO,CAACC,QAAR,GAAmBC,qBAAnB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,mCAAD,CAAhC;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,6BAAD,CAA3B;;AAEA,IAAIE,WAAW,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AAEA,SAASF,qBAAT,CAA+BK,OAA/B,EAAwCC,EAAxC,EAA4CC,GAA5C,EAAiD;AAC/C,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,MAAJ;AAEA,SAAOC,KAAP;;AAEA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnBN,IAAAA,OAAO,CAACO,KAAR,CAAc,eAAd;AACAH,IAAAA,MAAM,GAAGE,IAAT;AACA,WAAOE,OAAO,CAACF,IAAD,CAAd;AACD;;AAED,WAASE,OAAT,CAAiBF,IAAjB,EAAuB;AACrB,QAAIA,IAAI,KAAKF,MAAb,EAAqB;AACnBJ,MAAAA,OAAO,CAACO,KAAR,CAAc,uBAAd;AACA,aAAOE,QAAQ,CAACH,IAAD,CAAf;AACD;;AAED,QAAIR,aAAa,CAACQ,IAAD,CAAjB,EAAyB;AACvB,aAAOP,WAAW,CAACC,OAAD,EAAUQ,OAAV,EAAmB,YAAnB,CAAX,CAA4CF,IAA5C,CAAP;AACD;;AAED,QAAIH,IAAI,GAAG,CAAP,IAAaG,IAAI,KAAK,IAAT,IAAiB,CAACV,kBAAkB,CAACU,IAAD,CAArD,EAA8D;AAC5D,aAAOJ,GAAG,CAACI,IAAD,CAAV;AACD;;AAEDN,IAAAA,OAAO,CAACU,IAAR,CAAa,eAAb;AACA,WAAOT,EAAE,CAACK,IAAD,CAAT;AACD;;AAED,WAASG,QAAT,CAAkBH,IAAlB,EAAwB;AACtB,QAAIA,IAAI,KAAKF,MAAb,EAAqB;AACnBJ,MAAAA,OAAO,CAACW,OAAR,CAAgBL,IAAhB;AACAH,MAAAA,IAAI;AACJ,aAAOM,QAAP;AACD;;AAEDT,IAAAA,OAAO,CAACU,IAAR,CAAa,uBAAb;AACA,WAAOF,OAAO,CAACF,IAAD,CAAd;AACD;AACF","sourcesContent":["exports.tokenize = tokenizeThematicBreak\n\nvar markdownLineEnding = require('../character/markdown-line-ending')\nvar markdownSpace = require('../character/markdown-space')\n\nvar createSpace = require('./factory-space')\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  var size = 0\n  var marker\n\n  return start\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return createSpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}