{"ast":null,"code":"exports.tokenize = tokenizeCharacterReference;\n\nvar decode = require('parse-entities/decode-entity');\n\nvar asciiAlphanumeric = require('../character/ascii-alphanumeric');\n\nvar asciiDigit = require('../character/ascii-digit');\n\nvar asciiHexDigit = require('../character/ascii-hex-digit');\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  var self = this;\n  var size = 0;\n  var max;\n  var test;\n  return start;\n\n  function start(code) {\n    effects.enter('characterReference');\n    effects.enter('characterReferenceMarker');\n    effects.consume(code);\n    effects.exit('characterReferenceMarker');\n    return open;\n  }\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerNumeric');\n      return numeric;\n    }\n\n    effects.enter('characterReferenceValue');\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerHexadecimal');\n      effects.enter('characterReferenceValue');\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n\n    effects.enter('characterReferenceValue');\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  function value(code) {\n    var token;\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue');\n\n      if (test === asciiAlphanumeric && !decode(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      effects.enter('characterReferenceMarker');\n      effects.consume(code);\n      effects.exit('characterReferenceMarker');\n      effects.exit('characterReference');\n      return ok;\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n\n    return nok(code);\n  }\n}","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/micromark/dist/tokenize/character-reference.js"],"names":["exports","tokenize","tokenizeCharacterReference","decode","require","asciiAlphanumeric","asciiDigit","asciiHexDigit","effects","ok","nok","self","size","max","test","start","code","enter","consume","exit","open","numeric","value","token","sliceSerialize"],"mappings":"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","sourcesContent":["exports.tokenize = tokenizeCharacterReference\n\nvar decode = require('parse-entities/decode-entity')\nvar asciiAlphanumeric = require('../character/ascii-alphanumeric')\nvar asciiDigit = require('../character/ascii-digit')\nvar asciiHexDigit = require('../character/ascii-hex-digit')\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  var self = this\n  var size = 0\n  var max\n  var test\n\n  return start\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  function value(code) {\n    var token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (test === asciiAlphanumeric && !decode(self.sliceSerialize(token))) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}