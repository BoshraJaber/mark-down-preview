{"ast":null,"code":"module.exports = preprocessor;\nvar search = /[\\0\\t\\n\\r]/g;\n\nfunction preprocessor() {\n  var start = true;\n  var column = 1;\n  var buffer = '';\n  var atCarriageReturn;\n  return preprocess;\n\n  function preprocess(value, encoding, end) {\n    var chunks = [];\n    var match;\n    var next;\n    var startPosition;\n    var endPosition;\n    var code;\n    value = buffer + value.toString(encoding);\n    startPosition = 0;\n    buffer = '';\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n\n      start = undefined;\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n\n        if (code === 0) {\n          chunks.push(65533);\n          column++;\n        } else if (code === 9) {\n          next = Math.ceil(column / 4) * 4;\n          chunks.push(-2);\n\n          while (column++ < next) chunks.push(-1);\n        } else if (code === 10) {\n          chunks.push(-4);\n          column = 1;\n        } // Must be carriage return.\n        else {\n            atCarriageReturn = true;\n            column = 1;\n          }\n      }\n\n      startPosition = endPosition + 1;\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n\n    return chunks;\n  }\n}","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/micromark/dist/preprocess.js"],"names":["module","exports","preprocessor","search","start","column","buffer","atCarriageReturn","preprocess","value","encoding","end","chunks","match","next","startPosition","endPosition","code","toString","charCodeAt","undefined","length","lastIndex","exec","index","slice","push","Math","ceil"],"mappings":"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","sourcesContent":["module.exports = preprocessor\n\nvar search = /[\\0\\t\\n\\r]/g\n\nfunction preprocessor() {\n  var start = true\n  var column = 1\n  var buffer = ''\n  var atCarriageReturn\n\n  return preprocess\n\n  function preprocess(value, encoding, end) {\n    var chunks = []\n    var match\n    var next\n    var startPosition\n    var endPosition\n    var code\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition = match ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        if (code === 0) {\n          chunks.push(65533)\n          column++\n        } else if (code === 9) {\n          next = Math.ceil(column / 4) * 4\n          chunks.push(-2)\n          while (column++ < next) chunks.push(-1)\n        } else if (code === 10) {\n          chunks.push(-4)\n          column = 1\n        }\n        // Must be carriage return.\n        else {\n          atCarriageReturn = true\n          column = 1\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n"]},"metadata":{},"sourceType":"script"}