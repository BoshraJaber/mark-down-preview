{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar replace = require('replace-ext');\n\nvar buffer = require('is-buffer');\n\nmodule.exports = VFile;\nvar own = {}.hasOwnProperty;\nvar proto = VFile.prototype; // Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\n\nvar order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];\nproto.toString = toString; // Access full path (`~/index.min.js`).\n\nObject.defineProperty(proto, 'path', {\n  get: getPath,\n  set: setPath\n}); // Access parent path (`~`).\n\nObject.defineProperty(proto, 'dirname', {\n  get: getDirname,\n  set: setDirname\n}); // Access basename (`index.min.js`).\n\nObject.defineProperty(proto, 'basename', {\n  get: getBasename,\n  set: setBasename\n}); // Access extname (`.js`).\n\nObject.defineProperty(proto, 'extname', {\n  get: getExtname,\n  set: setExtname\n}); // Access stem (`index.min`).\n\nObject.defineProperty(proto, 'stem', {\n  get: getStem,\n  set: setStem\n}); // Construct a new file.\n\nfunction VFile(options) {\n  var prop;\n  var index;\n  var length;\n\n  if (!options) {\n    options = {};\n  } else if (typeof options === 'string' || buffer(options)) {\n    options = {\n      contents: options\n    };\n  } else if ('message' in options && 'messages' in options) {\n    return options;\n  }\n\n  if (!(this instanceof VFile)) {\n    return new VFile(options);\n  }\n\n  this.data = {};\n  this.messages = [];\n  this.history = [];\n  this.cwd = process.cwd(); // Set path related properties in the correct order.\n\n  index = -1;\n  length = order.length;\n\n  while (++index < length) {\n    prop = order[index];\n\n    if (own.call(options, prop)) {\n      this[prop] = options[prop];\n    }\n  } // Set non-path related properties.\n\n\n  for (prop in options) {\n    if (order.indexOf(prop) === -1) {\n      this[prop] = options[prop];\n    }\n  }\n}\n\nfunction getPath() {\n  return this.history[this.history.length - 1];\n}\n\nfunction setPath(path) {\n  assertNonEmpty(path, 'path');\n\n  if (path !== this.path) {\n    this.history.push(path);\n  }\n}\n\nfunction getDirname() {\n  return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\n}\n\nfunction setDirname(dirname) {\n  assertPath(this.path, 'dirname');\n  this.path = path.join(dirname || '', this.basename);\n}\n\nfunction getBasename() {\n  return typeof this.path === 'string' ? path.basename(this.path) : undefined;\n}\n\nfunction setBasename(basename) {\n  assertNonEmpty(basename, 'basename');\n  assertPart(basename, 'basename');\n  this.path = path.join(this.dirname || '', basename);\n}\n\nfunction getExtname() {\n  return typeof this.path === 'string' ? path.extname(this.path) : undefined;\n}\n\nfunction setExtname(extname) {\n  var ext = extname || '';\n  assertPart(ext, 'extname');\n  assertPath(this.path, 'extname');\n\n  if (ext) {\n    if (ext.charAt(0) !== '.') {\n      throw new Error('`extname` must start with `.`');\n    }\n\n    if (ext.indexOf('.', 1) !== -1) {\n      throw new Error('`extname` cannot contain multiple dots');\n    }\n  }\n\n  this.path = replace(this.path, ext);\n}\n\nfunction getStem() {\n  return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\n}\n\nfunction setStem(stem) {\n  assertNonEmpty(stem, 'stem');\n  assertPart(stem, 'stem');\n  this.path = path.join(this.dirname || '', stem + (this.extname || ''));\n} // Get the value of the file.\n\n\nfunction toString(encoding) {\n  var value = this.contents || '';\n  return buffer(value) ? value.toString(encoding) : String(value);\n} // Assert that `part` is not a path (i.e., does not contain `path.sep`).\n\n\nfunction assertPart(part, name) {\n  if (part.indexOf(path.sep) !== -1) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\n  }\n} // Assert that `part` is not empty.\n\n\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n} // Assert `path` exists.\n\n\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/vfile/core.js"],"names":["path","require","replace","buffer","module","exports","VFile","own","hasOwnProperty","proto","prototype","order","toString","Object","defineProperty","get","getPath","set","setPath","getDirname","setDirname","getBasename","setBasename","getExtname","setExtname","getStem","setStem","options","prop","index","length","contents","data","messages","history","cwd","process","call","indexOf","assertNonEmpty","push","dirname","undefined","assertPath","join","basename","assertPart","extname","ext","charAt","Error","stem","encoding","value","String","part","name","sep"],"mappings":"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","sourcesContent":["'use strict'\n\nvar path = require('path')\nvar replace = require('replace-ext')\nvar buffer = require('is-buffer')\n\nmodule.exports = VFile\n\nvar own = {}.hasOwnProperty\nvar proto = VFile.prototype\n\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nvar order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nproto.toString = toString\n\n// Access full path (`~/index.min.js`).\nObject.defineProperty(proto, 'path', {get: getPath, set: setPath})\n\n// Access parent path (`~`).\nObject.defineProperty(proto, 'dirname', {get: getDirname, set: setDirname})\n\n// Access basename (`index.min.js`).\nObject.defineProperty(proto, 'basename', {get: getBasename, set: setBasename})\n\n// Access extname (`.js`).\nObject.defineProperty(proto, 'extname', {get: getExtname, set: setExtname})\n\n// Access stem (`index.min`).\nObject.defineProperty(proto, 'stem', {get: getStem, set: setStem})\n\n// Construct a new file.\nfunction VFile(options) {\n  var prop\n  var index\n  var length\n\n  if (!options) {\n    options = {}\n  } else if (typeof options === 'string' || buffer(options)) {\n    options = {contents: options}\n  } else if ('message' in options && 'messages' in options) {\n    return options\n  }\n\n  if (!(this instanceof VFile)) {\n    return new VFile(options)\n  }\n\n  this.data = {}\n  this.messages = []\n  this.history = []\n  this.cwd = process.cwd()\n\n  // Set path related properties in the correct order.\n  index = -1\n  length = order.length\n\n  while (++index < length) {\n    prop = order[index]\n\n    if (own.call(options, prop)) {\n      this[prop] = options[prop]\n    }\n  }\n\n  // Set non-path related properties.\n  for (prop in options) {\n    if (order.indexOf(prop) === -1) {\n      this[prop] = options[prop]\n    }\n  }\n}\n\nfunction getPath() {\n  return this.history[this.history.length - 1]\n}\n\nfunction setPath(path) {\n  assertNonEmpty(path, 'path')\n\n  if (path !== this.path) {\n    this.history.push(path)\n  }\n}\n\nfunction getDirname() {\n  return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n}\n\nfunction setDirname(dirname) {\n  assertPath(this.path, 'dirname')\n  this.path = path.join(dirname || '', this.basename)\n}\n\nfunction getBasename() {\n  return typeof this.path === 'string' ? path.basename(this.path) : undefined\n}\n\nfunction setBasename(basename) {\n  assertNonEmpty(basename, 'basename')\n  assertPart(basename, 'basename')\n  this.path = path.join(this.dirname || '', basename)\n}\n\nfunction getExtname() {\n  return typeof this.path === 'string' ? path.extname(this.path) : undefined\n}\n\nfunction setExtname(extname) {\n  var ext = extname || ''\n\n  assertPart(ext, 'extname')\n  assertPath(this.path, 'extname')\n\n  if (ext) {\n    if (ext.charAt(0) !== '.') {\n      throw new Error('`extname` must start with `.`')\n    }\n\n    if (ext.indexOf('.', 1) !== -1) {\n      throw new Error('`extname` cannot contain multiple dots')\n    }\n  }\n\n  this.path = replace(this.path, ext)\n}\n\nfunction getStem() {\n  return typeof this.path === 'string'\n    ? path.basename(this.path, this.extname)\n    : undefined\n}\n\nfunction setStem(stem) {\n  assertNonEmpty(stem, 'stem')\n  assertPart(stem, 'stem')\n  this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n}\n\n// Get the value of the file.\nfunction toString(encoding) {\n  var value = this.contents || ''\n  return buffer(value) ? value.toString(encoding) : String(value)\n}\n\n// Assert that `part` is not a path (i.e., does not contain `path.sep`).\nfunction assertPart(part, name) {\n  if (part.indexOf(path.sep) !== -1) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n// Assert that `part` is not empty.\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n// Assert `path` exists.\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}