{"ast":null,"code":"'use strict';\n\nmodule.exports = scheme;\nscheme.displayName = 'scheme';\nscheme.aliases = [];\n\nfunction scheme(Prism) {\n  Prism.languages.scheme = {\n    // this supports \"normal\" single-line comments:\n    //   ; comment\n    // and (potentially nested) multiline comments:\n    //   #| comment #| nested |# still comment |#\n    // (only 1 level of nesting is supported)\n    comment: /;.*|#;\\s*\\((?:[^()]|\\([^()]*\\))*\\)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true\n    },\n    symbol: {\n      pattern: /'[^()#'\\s]+/,\n      greedy: true\n    },\n    character: {\n      pattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|\\S)/,\n      greedy: true,\n      alias: 'string'\n    },\n    'lambda-parameter': [// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n    {\n      pattern: /(\\(lambda\\s+)(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n      lookbehind: true\n    }, {\n      pattern: /(\\(lambda\\s+\\()[^()']+/,\n      lookbehind: true\n    }],\n    keyword: {\n      pattern: /(\\()(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    builtin: {\n      // all functions of the base library of R7RS plus some of built-ins of R5Rs\n      pattern: /(\\()(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    operator: {\n      pattern: /(\\()(?:[-+*%/]|[<>]=?|=>?)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    number: {\n      // This pattern (apart from the lookarounds) works like this:\n      //\n      // Decimal numbers\n      // <dec real>       := \\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+\n      // <dec complex>    := <dec real>(?:[+-]<dec real>i)?|<dec real>i\n      // <dec prefix>     := (?:#d(?:#[ei])?|#[ei](?:#d)?)?\n      // <dec number>     := <dec prefix>[+-]?<complex>\n      //\n      // Binary, octal, and hexadecimal numbers\n      // <b.o.x. real>    := [\\da-fA-F]+(?:\\/[\\da-fA-F]+)?\n      // <b.o.x. complex> := <b.o.x. real>(?:[+-]<b.o.x. real>i)?|<b.o.x. real>i\n      // <b.o.x. prefix>  := #[box](?:#[ei])?|#[ei](?:#[box])?\n      // <b.o.x. number>  := <b.o.x. prefix>[+-]?<b.o.x. complex>\n      //\n      // <number>         := <dec number>|<b.o.x. number>\n      pattern: /(^|[\\s()])(?:(?:#d(?:#[ei])?|#[ei](?:#d)?)?[+-]?(?:(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)(?:[+-](?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)?|(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)|(?:#[box](?:#[ei])?|#[ei](?:#[box])?)[+-]?(?:[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?(?:[+-][\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i)?|[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i))(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    boolean: {\n      pattern: /(^|[\\s()])#(?:[ft]|false|true)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    function: {\n      pattern: /(\\()(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    identifier: {\n      pattern: /(^|[\\s()])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\s]|$)/,\n      lookbehind: true,\n      greedy: true\n    },\n    punctuation: /[()']/\n  };\n}","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/refractor/lang/scheme.js"],"names":["module","exports","scheme","displayName","aliases","Prism","languages","comment","string","pattern","greedy","symbol","character","alias","lookbehind","keyword","builtin","operator","number","boolean","function","identifier","punctuation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyB;AACvB;AACA;AACA;AACA;AACA;AACAK,IAAAA,OAAO,EAAE,sGANc;AAOvBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,mBADH;AAENC,MAAAA,MAAM,EAAE;AAFF,KAPe;AAWvBC,IAAAA,MAAM,EAAE;AACNF,MAAAA,OAAO,EAAE,aADH;AAENC,MAAAA,MAAM,EAAE;AAFF,KAXe;AAevBE,IAAAA,SAAS,EAAE;AACTH,MAAAA,OAAO,EAAE,0CADA;AAETC,MAAAA,MAAM,EAAE,IAFC;AAGTG,MAAAA,KAAK,EAAE;AAHE,KAfY;AAoBvB,wBAAoB,CAClB;AACA;AACEJ,MAAAA,OAAO,EAAE,iDADX;AAEEK,MAAAA,UAAU,EAAE;AAFd,KAFkB,EAMlB;AACEL,MAAAA,OAAO,EAAE,wBADX;AAEEK,MAAAA,UAAU,EAAE;AAFd,KANkB,CApBG;AA+BvBC,IAAAA,OAAO,EAAE;AACPN,MAAAA,OAAO,EAAE,iYADF;AAEPK,MAAAA,UAAU,EAAE;AAFL,KA/Bc;AAmCvBE,IAAAA,OAAO,EAAE;AACP;AACAP,MAAAA,OAAO,EAAE,snDAFF;AAGPK,MAAAA,UAAU,EAAE;AAHL,KAnCc;AAwCvBG,IAAAA,QAAQ,EAAE;AACRR,MAAAA,OAAO,EAAE,wCADD;AAERK,MAAAA,UAAU,EAAE;AAFJ,KAxCa;AA4CvBI,IAAAA,MAAM,EAAE;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,MAAAA,OAAO,EAAE,sVAhBH;AAiBNK,MAAAA,UAAU,EAAE;AAjBN,KA5Ce;AA+DvBK,IAAAA,OAAO,EAAE;AACPV,MAAAA,OAAO,EAAE,4CADF;AAEPK,MAAAA,UAAU,EAAE;AAFL,KA/Dc;AAmEvBM,IAAAA,QAAQ,EAAE;AACRX,MAAAA,OAAO,EAAE,oDADD;AAERK,MAAAA,UAAU,EAAE;AAFJ,KAnEa;AAuEvBO,IAAAA,UAAU,EAAE;AACVZ,MAAAA,OAAO,EAAE,2CADC;AAEVK,MAAAA,UAAU,EAAE,IAFF;AAGVJ,MAAAA,MAAM,EAAE;AAHE,KAvEW;AA4EvBY,IAAAA,WAAW,EAAE;AA5EU,GAAzB;AA8ED","sourcesContent":["'use strict'\n\nmodule.exports = scheme\nscheme.displayName = 'scheme'\nscheme.aliases = []\nfunction scheme(Prism) {\n  Prism.languages.scheme = {\n    // this supports \"normal\" single-line comments:\n    //   ; comment\n    // and (potentially nested) multiline comments:\n    //   #| comment #| nested |# still comment |#\n    // (only 1 level of nesting is supported)\n    comment: /;.*|#;\\s*\\((?:[^()]|\\([^()]*\\))*\\)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true\n    },\n    symbol: {\n      pattern: /'[^()#'\\s]+/,\n      greedy: true\n    },\n    character: {\n      pattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|\\S)/,\n      greedy: true,\n      alias: 'string'\n    },\n    'lambda-parameter': [\n      // https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n      {\n        pattern: /(\\(lambda\\s+)(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n        lookbehind: true\n      },\n      {\n        pattern: /(\\(lambda\\s+\\()[^()']+/,\n        lookbehind: true\n      }\n    ],\n    keyword: {\n      pattern: /(\\()(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    builtin: {\n      // all functions of the base library of R7RS plus some of built-ins of R5Rs\n      pattern: /(\\()(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    operator: {\n      pattern: /(\\()(?:[-+*%/]|[<>]=?|=>?)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    number: {\n      // This pattern (apart from the lookarounds) works like this:\n      //\n      // Decimal numbers\n      // <dec real>       := \\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+\n      // <dec complex>    := <dec real>(?:[+-]<dec real>i)?|<dec real>i\n      // <dec prefix>     := (?:#d(?:#[ei])?|#[ei](?:#d)?)?\n      // <dec number>     := <dec prefix>[+-]?<complex>\n      //\n      // Binary, octal, and hexadecimal numbers\n      // <b.o.x. real>    := [\\da-fA-F]+(?:\\/[\\da-fA-F]+)?\n      // <b.o.x. complex> := <b.o.x. real>(?:[+-]<b.o.x. real>i)?|<b.o.x. real>i\n      // <b.o.x. prefix>  := #[box](?:#[ei])?|#[ei](?:#[box])?\n      // <b.o.x. number>  := <b.o.x. prefix>[+-]?<b.o.x. complex>\n      //\n      // <number>         := <dec number>|<b.o.x. number>\n      pattern: /(^|[\\s()])(?:(?:#d(?:#[ei])?|#[ei](?:#d)?)?[+-]?(?:(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)(?:[+-](?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)?|(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)|(?:#[box](?:#[ei])?|#[ei](?:#[box])?)[+-]?(?:[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?(?:[+-][\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i)?|[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i))(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    boolean: {\n      pattern: /(^|[\\s()])#(?:[ft]|false|true)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    function: {\n      pattern: /(\\()(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    identifier: {\n      pattern: /(^|[\\s()])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\s]|$)/,\n      lookbehind: true,\n      greedy: true\n    },\n    punctuation: /[()']/\n  }\n}\n"]},"metadata":{},"sourceType":"script"}