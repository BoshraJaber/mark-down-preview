{"ast":null,"code":"module.exports = chunkedSplice;\nvar v8MaxSafeChunkSize = 10000; // `Array#splice` takes all items to be inserted as individual argument which\n// causes a stack overflow in V8 when trying to insert 100k items for instance.\n\nfunction chunkedSplice(list, start, remove, items) {\n  var end = list.length;\n  var chunkStart = 0;\n  var result;\n  var parameters; // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n\n  remove = remove > 0 ? remove : 0; // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < v8MaxSafeChunkSize) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    return [].splice.apply(list, parameters);\n  } // Delete `remove` items starting from `start`\n\n\n  result = [].splice.apply(list, [start, remove]); // Insert the items in chunks to not cause stack overflows.\n\n  while (chunkStart < items.length) {\n    parameters = items.slice(chunkStart, chunkStart + v8MaxSafeChunkSize);\n    parameters.unshift(start, 0);\n    [].splice.apply(list, parameters);\n    chunkStart += v8MaxSafeChunkSize;\n    start += v8MaxSafeChunkSize;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/micromark/dist/util/chunked-splice.js"],"names":["module","exports","chunkedSplice","v8MaxSafeChunkSize","list","start","remove","items","end","length","chunkStart","result","parameters","Array","from","unshift","splice","apply","slice"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,aAAjB;AAEA,IAAIC,kBAAkB,GAAG,KAAzB,C,CAEA;AACA;;AACA,SAASD,aAAT,CAAuBE,IAAvB,EAA6BC,KAA7B,EAAoCC,MAApC,EAA4CC,KAA5C,EAAmD;AACjD,MAAIC,GAAG,GAAGJ,IAAI,CAACK,MAAf;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,MAAJ;AACA,MAAIC,UAAJ,CAJiD,CAMjD;;AACA,MAAIP,KAAK,GAAG,CAAZ,EAAe;AACbA,IAAAA,KAAK,GAAG,CAACA,KAAD,GAASG,GAAT,GAAe,CAAf,GAAmBA,GAAG,GAAGH,KAAjC;AACD,GAFD,MAEO;AACLA,IAAAA,KAAK,GAAGA,KAAK,GAAGG,GAAR,GAAcA,GAAd,GAAoBH,KAA5B;AACD;;AAEDC,EAAAA,MAAM,GAAGA,MAAM,GAAG,CAAT,GAAaA,MAAb,GAAsB,CAA/B,CAbiD,CAejD;;AACA,MAAIC,KAAK,CAACE,MAAN,GAAeN,kBAAnB,EAAuC;AACrCS,IAAAA,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWP,KAAX,CAAb;AACAK,IAAAA,UAAU,CAACG,OAAX,CAAmBV,KAAnB,EAA0BC,MAA1B;AACA,WAAO,GAAGU,MAAH,CAAUC,KAAV,CAAgBb,IAAhB,EAAsBQ,UAAtB,CAAP;AACD,GApBgD,CAsBjD;;;AACAD,EAAAA,MAAM,GAAG,GAAGK,MAAH,CAAUC,KAAV,CAAgBb,IAAhB,EAAsB,CAACC,KAAD,EAAQC,MAAR,CAAtB,CAAT,CAvBiD,CAyBjD;;AACA,SAAOI,UAAU,GAAGH,KAAK,CAACE,MAA1B,EAAkC;AAChCG,IAAAA,UAAU,GAAGL,KAAK,CAACW,KAAN,CAAYR,UAAZ,EAAwBA,UAAU,GAAGP,kBAArC,CAAb;AACAS,IAAAA,UAAU,CAACG,OAAX,CAAmBV,KAAnB,EAA0B,CAA1B;AACC,OAAGW,MAAH,CAAUC,KAAV,CAAgBb,IAAhB,EAAsBQ,UAAtB;AAEDF,IAAAA,UAAU,IAAIP,kBAAd;AACAE,IAAAA,KAAK,IAAIF,kBAAT;AACD;;AAED,SAAOQ,MAAP;AACD","sourcesContent":["module.exports = chunkedSplice\n\nvar v8MaxSafeChunkSize = 10000\n\n// `Array#splice` takes all items to be inserted as individual argument which\n// causes a stack overflow in V8 when trying to insert 100k items for instance.\nfunction chunkedSplice(list, start, remove, items) {\n  var end = list.length\n  var chunkStart = 0\n  var result\n  var parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < v8MaxSafeChunkSize) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    return [].splice.apply(list, parameters)\n  }\n\n  // Delete `remove` items starting from `start`\n  result = [].splice.apply(list, [start, remove])\n\n  // Insert the items in chunks to not cause stack overflows.\n  while (chunkStart < items.length) {\n    parameters = items.slice(chunkStart, chunkStart + v8MaxSafeChunkSize)\n    parameters.unshift(start, 0)\n    ;[].splice.apply(list, parameters)\n\n    chunkStart += v8MaxSafeChunkSize\n    start += v8MaxSafeChunkSize\n  }\n\n  return result\n}\n"]},"metadata":{},"sourceType":"script"}