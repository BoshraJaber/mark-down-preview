{"ast":null,"code":"exports.tokenize = initializeFlow;\n\nvar markdownLineEnding = require('../character/markdown-line-ending');\n\nvar createSpace = require('../tokenize/factory-space');\n\nvar blank = require('../tokenize/partial-blank-line');\n\nvar content = require('../tokenize/content');\n\nfunction initializeFlow(effects) {\n  var self = this;\n  var initial = effects.attempt( // Try to parse a blank line.\n  blank, atBlankEnding, // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, createSpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), 'linePrefix')));\n  return initial;\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter('lineEndingBlank');\n    effects.consume(code);\n    effects.exit('lineEndingBlank');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/micromark/dist/initialize/flow.js"],"names":["exports","tokenize","initializeFlow","markdownLineEnding","require","createSpace","blank","content","effects","self","initial","attempt","atBlankEnding","parser","constructs","flowInitial","afterConstruct","flow","code","consume","enter","exit","currentConstruct","undefined"],"mappings":"AAAAA,OAAO,CAACC,QAAR,GAAmBC,cAAnB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,mCAAD,CAAhC;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,gCAAD,CAAnB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,qBAAD,CAArB;;AAEA,SAASF,cAAT,CAAwBM,OAAxB,EAAiC;AAC/B,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,OAAO,GAAGF,OAAO,CAACG,OAAR,EACZ;AACAL,EAAAA,KAFY,EAGZM,aAHY,EAIZ;AACAJ,EAAAA,OAAO,CAACG,OAAR,CACE,KAAKE,MAAL,CAAYC,UAAZ,CAAuBC,WADzB,EAEEC,cAFF,EAGEX,WAAW,CACTG,OADS,EAETA,OAAO,CAACG,OAAR,CACE,KAAKE,MAAL,CAAYC,UAAZ,CAAuBG,IADzB,EAEED,cAFF,EAGER,OAAO,CAACG,OAAR,CAAgBJ,OAAhB,EAAyBS,cAAzB,CAHF,CAFS,EAOT,YAPS,CAHb,CALY,CAAd;AAoBA,SAAON,OAAP;;AAEA,WAASE,aAAT,CAAuBM,IAAvB,EAA6B;AAC3B,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBV,MAAAA,OAAO,CAACW,OAAR,CAAgBD,IAAhB;AACA;AACD;;AAEDV,IAAAA,OAAO,CAACY,KAAR,CAAc,iBAAd;AACAZ,IAAAA,OAAO,CAACW,OAAR,CAAgBD,IAAhB;AACAV,IAAAA,OAAO,CAACa,IAAR,CAAa,iBAAb;AACAZ,IAAAA,IAAI,CAACa,gBAAL,GAAwBC,SAAxB;AACA,WAAOb,OAAP;AACD;;AAED,WAASM,cAAT,CAAwBE,IAAxB,EAA8B;AAC5B,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBV,MAAAA,OAAO,CAACW,OAAR,CAAgBD,IAAhB;AACA;AACD;;AAEDV,IAAAA,OAAO,CAACY,KAAR,CAAc,YAAd;AACAZ,IAAAA,OAAO,CAACW,OAAR,CAAgBD,IAAhB;AACAV,IAAAA,OAAO,CAACa,IAAR,CAAa,YAAb;AACAZ,IAAAA,IAAI,CAACa,gBAAL,GAAwBC,SAAxB;AACA,WAAOb,OAAP;AACD;AACF","sourcesContent":["exports.tokenize = initializeFlow\n\nvar markdownLineEnding = require('../character/markdown-line-ending')\n\nvar createSpace = require('../tokenize/factory-space')\nvar blank = require('../tokenize/partial-blank-line')\nvar content = require('../tokenize/content')\n\nfunction initializeFlow(effects) {\n  var self = this\n  var initial = effects.attempt(\n    // Try to parse a blank line.\n    blank,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      createSpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n\n  return initial\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n"]},"metadata":{},"sourceType":"script"}