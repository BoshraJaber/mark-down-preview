{"ast":null,"code":"module.exports = combineExtensions;\n\nvar own = require('../constant/has-own-property');\n\nvar miniflat = require('./miniflat');\n\nvar chunkedSplice = require('./chunked-splice'); // Combine several syntax extensions into one.\n\n\nfunction combineExtensions(extensions) {\n  var all = {};\n  var index = -1;\n\n  while (++index < extensions.length) {\n    extension(all, extensions[index]);\n  }\n\n  return all;\n}\n\nfunction extension(all, extension) {\n  var hook;\n  var left;\n  var right;\n  var code;\n\n  for (hook in extension) {\n    left = own.call(all, hook) ? all[hook] : all[hook] = {};\n    right = extension[hook];\n\n    for (code in right) {\n      left[code] = constructs(miniflat(right[code]), own.call(left, code) ? left[code] : []);\n    }\n  }\n}\n\nfunction constructs(list, existing) {\n  var index = -1;\n  var before = [];\n\n  while (++index < list.length) {\n    ;\n    (list[index].add === 'after' ? existing : before).push(list[index]);\n  }\n\n  chunkedSplice(existing, 0, 0, before);\n  return existing;\n}","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/micromark/dist/util/combine-extensions.js"],"names":["module","exports","combineExtensions","own","require","miniflat","chunkedSplice","extensions","all","index","length","extension","hook","left","right","code","call","constructs","list","existing","before","add","push"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,iBAAjB;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,8BAAD,CAAjB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,kBAAD,CAA3B,C,CAEA;;;AACA,SAASF,iBAAT,CAA2BK,UAA3B,EAAuC;AACrC,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;;AAEA,SAAO,EAAEA,KAAF,GAAUF,UAAU,CAACG,MAA5B,EAAoC;AAClCC,IAAAA,SAAS,CAACH,GAAD,EAAMD,UAAU,CAACE,KAAD,CAAhB,CAAT;AACD;;AAED,SAAOD,GAAP;AACD;;AAED,SAASG,SAAT,CAAmBH,GAAnB,EAAwBG,SAAxB,EAAmC;AACjC,MAAIC,IAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,IAAJ;;AAEA,OAAKH,IAAL,IAAaD,SAAb,EAAwB;AACtBE,IAAAA,IAAI,GAAGV,GAAG,CAACa,IAAJ,CAASR,GAAT,EAAcI,IAAd,IAAsBJ,GAAG,CAACI,IAAD,CAAzB,GAAmCJ,GAAG,CAACI,IAAD,CAAH,GAAY,EAAtD;AACAE,IAAAA,KAAK,GAAGH,SAAS,CAACC,IAAD,CAAjB;;AAEA,SAAKG,IAAL,IAAaD,KAAb,EAAoB;AAClBD,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaE,UAAU,CACrBZ,QAAQ,CAACS,KAAK,CAACC,IAAD,CAAN,CADa,EAErBZ,GAAG,CAACa,IAAJ,CAASH,IAAT,EAAeE,IAAf,IAAuBF,IAAI,CAACE,IAAD,CAA3B,GAAoC,EAFf,CAAvB;AAID;AACF;AACF;;AAED,SAASE,UAAT,CAAoBC,IAApB,EAA0BC,QAA1B,EAAoC;AAClC,MAAIV,KAAK,GAAG,CAAC,CAAb;AACA,MAAIW,MAAM,GAAG,EAAb;;AAEA,SAAO,EAAEX,KAAF,GAAUS,IAAI,CAACR,MAAtB,EAA8B;AAC5B;AAAC,KAACQ,IAAI,CAACT,KAAD,CAAJ,CAAYY,GAAZ,KAAoB,OAApB,GAA8BF,QAA9B,GAAyCC,MAA1C,EAAkDE,IAAlD,CAAuDJ,IAAI,CAACT,KAAD,CAA3D;AACF;;AAEDH,EAAAA,aAAa,CAACa,QAAD,EAAW,CAAX,EAAc,CAAd,EAAiBC,MAAjB,CAAb;AACA,SAAOD,QAAP;AACD","sourcesContent":["module.exports = combineExtensions\n\nvar own = require('../constant/has-own-property')\nvar miniflat = require('./miniflat')\nvar chunkedSplice = require('./chunked-splice')\n\n// Combine several syntax extensions into one.\nfunction combineExtensions(extensions) {\n  var all = {}\n  var index = -1\n\n  while (++index < extensions.length) {\n    extension(all, extensions[index])\n  }\n\n  return all\n}\n\nfunction extension(all, extension) {\n  var hook\n  var left\n  var right\n  var code\n\n  for (hook in extension) {\n    left = own.call(all, hook) ? all[hook] : (all[hook] = {})\n    right = extension[hook]\n\n    for (code in right) {\n      left[code] = constructs(\n        miniflat(right[code]),\n        own.call(left, code) ? left[code] : []\n      )\n    }\n  }\n}\n\nfunction constructs(list, existing) {\n  var index = -1\n  var before = []\n\n  while (++index < list.length) {\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  chunkedSplice(existing, 0, 0, before)\n  return existing\n}\n"]},"metadata":{},"sourceType":"script"}