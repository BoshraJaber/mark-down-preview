{"ast":null,"code":"exports.tokenize = tokenizeCodeFenced;\nexports.concrete = true;\n\nvar markdownLineEnding = require('../character/markdown-line-ending');\n\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space');\n\nvar prefixSize = require('../util/prefix-size');\n\nvar createSpace = require('./factory-space');\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  var self = this;\n  var initialPrefix = prefixSize(this.events, 'linePrefix');\n  var sizeOpen = 0;\n  var marker;\n  return start;\n\n  function start(code) {\n    effects.enter('codeFenced');\n    effects.enter('codeFencedFence');\n    effects.enter('codeFencedFenceSequence');\n    marker = code;\n    return sequenceOpen(code);\n  }\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n\n    effects.exit('codeFencedFenceSequence');\n    return sizeOpen < 3 ? nok(code) : createSpace(effects, infoOpen, 'whitespace')(code);\n  }\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code);\n    }\n\n    effects.enter('codeFencedFenceInfo');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return info(code);\n  }\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceInfo');\n      return createSpace(effects, infoAfter, 'whitespace')(code);\n    }\n\n    if (code === 96 && code === marker) return nok(code);\n    effects.consume(code);\n    return info;\n  }\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code);\n    }\n\n    effects.enter('codeFencedFenceMeta');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return meta(code);\n  }\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceMeta');\n      return openAfter(code);\n    }\n\n    if (code === 96 && code === marker) return nok(code);\n    effects.consume(code);\n    return meta;\n  }\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence');\n    return self.interrupt ? ok(code) : content(code);\n  }\n\n  function content(code) {\n    if (code === null) {\n      return after(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return effects.attempt({\n        tokenize: tokenizeClosingFence,\n        partial: true\n      }, after, initialPrefix ? createSpace(effects, content, 'linePrefix', initialPrefix + 1) : content);\n    }\n\n    effects.enter('codeFlowValue');\n    return contentContinue(code);\n  }\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue');\n      return content(code);\n    }\n\n    effects.consume(code);\n    return contentContinue;\n  }\n\n  function after(code) {\n    effects.exit('codeFenced');\n    return ok(code);\n  }\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    var size = 0;\n    return createSpace(effects, closingPrefixAfter, 'linePrefix', 4);\n\n    function closingPrefixAfter(code) {\n      effects.enter('codeFencedFence');\n      effects.enter('codeFencedFenceSequence');\n      return closingSequence(code);\n    }\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code);\n        size++;\n        return closingSequence;\n      }\n\n      if (size < sizeOpen) return nok(code);\n      effects.exit('codeFencedFenceSequence');\n      return createSpace(effects, closingSequenceEnd, 'whitespace')(code);\n    }\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence');\n        return ok(code);\n      }\n\n      return nok(code);\n    }\n  }\n}","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/micromark/dist/tokenize/code-fenced.js"],"names":["exports","tokenize","tokenizeCodeFenced","concrete","markdownLineEnding","require","markdownLineEndingOrSpace","prefixSize","createSpace","effects","ok","nok","self","initialPrefix","events","sizeOpen","marker","start","code","enter","sequenceOpen","consume","exit","infoOpen","openAfter","contentType","info","infoAfter","meta","interrupt","content","after","attempt","tokenizeClosingFence","partial","contentContinue","size","closingPrefixAfter","closingSequence","closingSequenceEnd"],"mappings":"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","sourcesContent":["exports.tokenize = tokenizeCodeFenced\nexports.concrete = true\n\nvar markdownLineEnding = require('../character/markdown-line-ending')\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space')\n\nvar prefixSize = require('../util/prefix-size')\nvar createSpace = require('./factory-space')\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  var self = this\n  var initialPrefix = prefixSize(this.events, 'linePrefix')\n  var sizeOpen = 0\n  var marker\n\n  return start\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : createSpace(effects, infoOpen, 'whitespace')(code)\n  }\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {contentType: 'string'})\n    return info(code)\n  }\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return createSpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {contentType: 'string'})\n    return meta(code)\n  }\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : content(code)\n  }\n\n  function content(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return effects.attempt(\n        {tokenize: tokenizeClosingFence, partial: true},\n        after,\n        initialPrefix\n          ? createSpace(effects, content, 'linePrefix', initialPrefix + 1)\n          : content\n      )\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return content(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    var size = 0\n\n    return createSpace(effects, closingPrefixAfter, 'linePrefix', 4)\n\n    function closingPrefixAfter(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return createSpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}