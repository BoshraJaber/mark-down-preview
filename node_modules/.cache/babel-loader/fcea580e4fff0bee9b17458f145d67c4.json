{"ast":null,"code":"module.exports = createParser;\n\nvar initializeContent = require('./initialize/content');\n\nvar initializeDocument = require('./initialize/document');\n\nvar initializeFlow = require('./initialize/flow');\n\nvar initializeText = require('./initialize/text');\n\nvar constructs = require('./constructs');\n\nvar createTokenizer = require('./util/create-tokenizer');\n\nvar combineExtensions = require('./util/combine-extensions');\n\nvar miniflat = require('./util/miniflat');\n\nfunction createParser(options) {\n  var settings = options || {};\n  var parser = {\n    defined: [],\n    constructs: combineExtensions([constructs].concat(miniflat(settings.extensions))),\n    content: create(initializeContent),\n    document: create(initializeDocument),\n    flow: create(initializeFlow),\n    string: create(initializeText.string),\n    text: create(initializeText.text)\n  };\n  return parser;\n\n  function create(initializer) {\n    return creator;\n\n    function creator(from) {\n      return createTokenizer(parser, initializer, from);\n    }\n  }\n}","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/micromark/dist/parse.js"],"names":["module","exports","createParser","initializeContent","require","initializeDocument","initializeFlow","initializeText","constructs","createTokenizer","combineExtensions","miniflat","options","settings","parser","defined","concat","extensions","content","create","document","flow","string","text","initializer","creator","from"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,sBAAD,CAA/B;;AACA,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,uBAAD,CAAhC;;AACA,IAAIE,cAAc,GAAGF,OAAO,CAAC,mBAAD,CAA5B;;AACA,IAAIG,cAAc,GAAGH,OAAO,CAAC,mBAAD,CAA5B;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIK,eAAe,GAAGL,OAAO,CAAC,yBAAD,CAA7B;;AACA,IAAIM,iBAAiB,GAAGN,OAAO,CAAC,2BAAD,CAA/B;;AACA,IAAIO,QAAQ,GAAGP,OAAO,CAAC,iBAAD,CAAtB;;AAEA,SAASF,YAAT,CAAsBU,OAAtB,EAA+B;AAC7B,MAAIC,QAAQ,GAAGD,OAAO,IAAI,EAA1B;AACA,MAAIE,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE,EADE;AAEXP,IAAAA,UAAU,EAAEE,iBAAiB,CAC3B,CAACF,UAAD,EAAaQ,MAAb,CAAoBL,QAAQ,CAACE,QAAQ,CAACI,UAAV,CAA5B,CAD2B,CAFlB;AAMXC,IAAAA,OAAO,EAAEC,MAAM,CAAChB,iBAAD,CANJ;AAOXiB,IAAAA,QAAQ,EAAED,MAAM,CAACd,kBAAD,CAPL;AAQXgB,IAAAA,IAAI,EAAEF,MAAM,CAACb,cAAD,CARD;AASXgB,IAAAA,MAAM,EAAEH,MAAM,CAACZ,cAAc,CAACe,MAAhB,CATH;AAUXC,IAAAA,IAAI,EAAEJ,MAAM,CAACZ,cAAc,CAACgB,IAAhB;AAVD,GAAb;AAaA,SAAOT,MAAP;;AAEA,WAASK,MAAT,CAAgBK,WAAhB,EAA6B;AAC3B,WAAOC,OAAP;;AACA,aAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,aAAOjB,eAAe,CAACK,MAAD,EAASU,WAAT,EAAsBE,IAAtB,CAAtB;AACD;AACF;AACF","sourcesContent":["module.exports = createParser\n\nvar initializeContent = require('./initialize/content')\nvar initializeDocument = require('./initialize/document')\nvar initializeFlow = require('./initialize/flow')\nvar initializeText = require('./initialize/text')\nvar constructs = require('./constructs')\nvar createTokenizer = require('./util/create-tokenizer')\nvar combineExtensions = require('./util/combine-extensions')\nvar miniflat = require('./util/miniflat')\n\nfunction createParser(options) {\n  var settings = options || {}\n  var parser = {\n    defined: [],\n    constructs: combineExtensions(\n      [constructs].concat(miniflat(settings.extensions))\n    ),\n\n    content: create(initializeContent),\n    document: create(initializeDocument),\n    flow: create(initializeFlow),\n    string: create(initializeText.string),\n    text: create(initializeText.text)\n  }\n\n  return parser\n\n  function create(initializer) {\n    return creator\n    function creator(from) {\n      return createTokenizer(parser, initializer, from)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}