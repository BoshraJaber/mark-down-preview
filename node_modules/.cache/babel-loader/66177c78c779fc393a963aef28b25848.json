{"ast":null,"code":"module.exports = createWhitespace;\n\nvar markdownLineEnding = require('../character/markdown-line-ending');\n\nvar markdownSpace = require('../character/markdown-space');\n\nvar createSpace = require('./factory-space');\n\nfunction createWhitespace(effects, ok) {\n  var seen;\n  return start;\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      seen = true;\n      return start;\n    }\n\n    if (markdownSpace(code)) {\n      return createSpace(effects, start, seen ? 'linePrefix' : 'lineSuffix')(code);\n    }\n\n    return ok(code);\n  }\n}","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/micromark/dist/tokenize/factory-whitespace.js"],"names":["module","exports","createWhitespace","markdownLineEnding","require","markdownSpace","createSpace","effects","ok","seen","start","code","enter","consume","exit"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,gBAAjB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,mCAAD,CAAhC;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,6BAAD,CAA3B;;AAEA,IAAIE,WAAW,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AAEA,SAASF,gBAAT,CAA0BK,OAA1B,EAAmCC,EAAnC,EAAuC;AACrC,MAAIC,IAAJ;AACA,SAAOC,KAAP;;AAEA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB,QAAIR,kBAAkB,CAACQ,IAAD,CAAtB,EAA8B;AAC5BJ,MAAAA,OAAO,CAACK,KAAR,CAAc,YAAd;AACAL,MAAAA,OAAO,CAACM,OAAR,CAAgBF,IAAhB;AACAJ,MAAAA,OAAO,CAACO,IAAR,CAAa,YAAb;AACAL,MAAAA,IAAI,GAAG,IAAP;AACA,aAAOC,KAAP;AACD;;AAED,QAAIL,aAAa,CAACM,IAAD,CAAjB,EAAyB;AACvB,aAAOL,WAAW,CAChBC,OADgB,EAEhBG,KAFgB,EAGhBD,IAAI,GAAG,YAAH,GAAkB,YAHN,CAAX,CAILE,IAJK,CAAP;AAKD;;AAED,WAAOH,EAAE,CAACG,IAAD,CAAT;AACD;AACF","sourcesContent":["module.exports = createWhitespace\n\nvar markdownLineEnding = require('../character/markdown-line-ending')\nvar markdownSpace = require('../character/markdown-space')\n\nvar createSpace = require('./factory-space')\n\nfunction createWhitespace(effects, ok) {\n  var seen\n  return start\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return createSpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}