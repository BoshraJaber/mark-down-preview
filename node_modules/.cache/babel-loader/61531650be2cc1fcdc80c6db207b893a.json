{"ast":null,"code":"exports.tokenize = tokenizeDefinition;\n\nvar markdownLineEnding = require('../character/markdown-line-ending');\n\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space');\n\nvar normalizeIdentifier = require('../util/normalize-identifier');\n\nvar createDestination = require('./factory-destination');\n\nvar createLabel = require('./factory-label');\n\nvar createSpace = require('./factory-space');\n\nvar createWhitespace = require('./factory-whitespace');\n\nvar createTitle = require('./factory-title');\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  var self = this;\n  var destinationAfter = effects.attempt({\n    tokenize: tokenizeTitle,\n    partial: true\n  }, createSpace(effects, after, 'whitespace'), createSpace(effects, after, 'whitespace'));\n  var identifier;\n  return start;\n\n  function start(code) {\n    effects.enter('definition');\n    return createLabel.call(self, effects, labelAfter, nok, 'definitionLabel', 'definitionLabelMarker', 'definitionLabelString')(code);\n  }\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker'); // Note: blank lines can’t exist in content.\n\n      return createWhitespace(effects, createDestination(effects, destinationAfter, nok, 'definitionDestination', 'definitionDestinationLiteral', 'definitionDestinationLiteralMarker', 'definitionDestinationRaw', 'definitionDestinationString'));\n    }\n\n    return nok(code);\n  }\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition');\n\n      if (self.parser.defined.indexOf(identifier) < 0) {\n        self.parser.defined.push(identifier);\n      }\n\n      return ok(code);\n    }\n\n    return nok(code);\n  }\n}\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start;\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code) ? createWhitespace(effects, before)(code) : nok(code);\n  }\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return createTitle(effects, createSpace(effects, after, 'whitespace'), nok, 'definitionTitle', 'definitionTitleMarker', 'definitionTitleString')(code);\n    }\n\n    return nok(code);\n  }\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","map":{"version":3,"sources":["/home/boshra/personal/markdown-editor/node_modules/micromark/dist/tokenize/definition.js"],"names":["exports","tokenize","tokenizeDefinition","markdownLineEnding","require","markdownLineEndingOrSpace","normalizeIdentifier","createDestination","createLabel","createSpace","createWhitespace","createTitle","effects","ok","nok","self","destinationAfter","attempt","tokenizeTitle","partial","after","identifier","start","code","enter","call","labelAfter","sliceSerialize","events","length","slice","consume","exit","parser","defined","indexOf","push","before"],"mappings":"AAAAA,OAAO,CAACC,QAAR,GAAmBC,kBAAnB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,mCAAD,CAAhC;;AACA,IAAIC,yBAAyB,GAAGD,OAAO,CAAC,4CAAD,CAAvC;;AACA,IAAIE,mBAAmB,GAAGF,OAAO,CAAC,8BAAD,CAAjC;;AAEA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,uBAAD,CAA/B;;AACA,IAAII,WAAW,GAAGJ,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAIK,WAAW,GAAGL,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAIM,gBAAgB,GAAGN,OAAO,CAAC,sBAAD,CAA9B;;AACA,IAAIO,WAAW,GAAGP,OAAO,CAAC,iBAAD,CAAzB;;AAEA,SAASF,kBAAT,CAA4BU,OAA5B,EAAqCC,EAArC,EAAyCC,GAAzC,EAA8C;AAC5C,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,gBAAgB,GAAGJ,OAAO,CAACK,OAAR,CACrB;AAAChB,IAAAA,QAAQ,EAAEiB,aAAX;AAA0BC,IAAAA,OAAO,EAAE;AAAnC,GADqB,EAErBV,WAAW,CAACG,OAAD,EAAUQ,KAAV,EAAiB,YAAjB,CAFU,EAGrBX,WAAW,CAACG,OAAD,EAAUQ,KAAV,EAAiB,YAAjB,CAHU,CAAvB;AAMA,MAAIC,UAAJ;AAEA,SAAOC,KAAP;;AAEA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnBX,IAAAA,OAAO,CAACY,KAAR,CAAc,YAAd;AACA,WAAOhB,WAAW,CAACiB,IAAZ,CACLV,IADK,EAELH,OAFK,EAGLc,UAHK,EAILZ,GAJK,EAKL,iBALK,EAML,uBANK,EAOL,uBAPK,EAQLS,IARK,CAAP;AASD;;AAED,WAASG,UAAT,CAAoBH,IAApB,EAA0B;AACxBF,IAAAA,UAAU,GAAGf,mBAAmB,CAC9BS,IAAI,CAACY,cAAL,CAAoBZ,IAAI,CAACa,MAAL,CAAYb,IAAI,CAACa,MAAL,CAAYC,MAAZ,GAAqB,CAAjC,EAAoC,CAApC,CAApB,EAA4DC,KAA5D,CAAkE,CAAlE,EAAqE,CAAC,CAAtE,CAD8B,CAAhC;;AAIA,QAAIP,IAAI,KAAK,EAAb,EAAiB;AACfX,MAAAA,OAAO,CAACY,KAAR,CAAc,kBAAd;AACAZ,MAAAA,OAAO,CAACmB,OAAR,CAAgBR,IAAhB;AACAX,MAAAA,OAAO,CAACoB,IAAR,CAAa,kBAAb,EAHe,CAKf;;AACA,aAAOtB,gBAAgB,CACrBE,OADqB,EAErBL,iBAAiB,CACfK,OADe,EAEfI,gBAFe,EAGfF,GAHe,EAIf,uBAJe,EAKf,8BALe,EAMf,oCANe,EAOf,0BAPe,EAQf,6BARe,CAFI,CAAvB;AAaD;;AAED,WAAOA,GAAG,CAACS,IAAD,CAAV;AACD;;AAED,WAASH,KAAT,CAAeG,IAAf,EAAqB;AACnB,QAAIA,IAAI,KAAK,IAAT,IAAiBpB,kBAAkB,CAACoB,IAAD,CAAvC,EAA+C;AAC7CX,MAAAA,OAAO,CAACoB,IAAR,CAAa,YAAb;;AAEA,UAAIjB,IAAI,CAACkB,MAAL,CAAYC,OAAZ,CAAoBC,OAApB,CAA4Bd,UAA5B,IAA0C,CAA9C,EAAiD;AAC/CN,QAAAA,IAAI,CAACkB,MAAL,CAAYC,OAAZ,CAAoBE,IAApB,CAAyBf,UAAzB;AACD;;AAED,aAAOR,EAAE,CAACU,IAAD,CAAT;AACD;;AAED,WAAOT,GAAG,CAACS,IAAD,CAAV;AACD;AACF;;AAED,SAASL,aAAT,CAAuBN,OAAvB,EAAgCC,EAAhC,EAAoCC,GAApC,EAAyC;AACvC,SAAOQ,KAAP;;AAEA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB,WAAOlB,yBAAyB,CAACkB,IAAD,CAAzB,GACHb,gBAAgB,CAACE,OAAD,EAAUyB,MAAV,CAAhB,CAAkCd,IAAlC,CADG,GAEHT,GAAG,CAACS,IAAD,CAFP;AAGD;;AAED,WAASc,MAAT,CAAgBd,IAAhB,EAAsB;AACpB,QAAIA,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAAxB,IAA8BA,IAAI,KAAK,EAA3C,EAA+C;AAC7C,aAAOZ,WAAW,CAChBC,OADgB,EAEhBH,WAAW,CAACG,OAAD,EAAUQ,KAAV,EAAiB,YAAjB,CAFK,EAGhBN,GAHgB,EAIhB,iBAJgB,EAKhB,uBALgB,EAMhB,uBANgB,CAAX,CAOLS,IAPK,CAAP;AAQD;;AAED,WAAOT,GAAG,CAACS,IAAD,CAAV;AACD;;AAED,WAASH,KAAT,CAAeG,IAAf,EAAqB;AACnB,WAAOA,IAAI,KAAK,IAAT,IAAiBpB,kBAAkB,CAACoB,IAAD,CAAnC,GAA4CV,EAAE,CAACU,IAAD,CAA9C,GAAuDT,GAAG,CAACS,IAAD,CAAjE;AACD;AACF","sourcesContent":["exports.tokenize = tokenizeDefinition\n\nvar markdownLineEnding = require('../character/markdown-line-ending')\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space')\nvar normalizeIdentifier = require('../util/normalize-identifier')\n\nvar createDestination = require('./factory-destination')\nvar createLabel = require('./factory-label')\nvar createSpace = require('./factory-space')\nvar createWhitespace = require('./factory-whitespace')\nvar createTitle = require('./factory-title')\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  var self = this\n  var destinationAfter = effects.attempt(\n    {tokenize: tokenizeTitle, partial: true},\n    createSpace(effects, after, 'whitespace'),\n    createSpace(effects, after, 'whitespace')\n  )\n\n  var identifier\n\n  return start\n\n  function start(code) {\n    effects.enter('definition')\n    return createLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n\n      // Note: blank lines can’t exist in content.\n      return createWhitespace(\n        effects,\n        createDestination(\n          effects,\n          destinationAfter,\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (self.parser.defined.indexOf(identifier) < 0) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? createWhitespace(effects, before)(code)\n      : nok(code)\n  }\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return createTitle(\n        effects,\n        createSpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}